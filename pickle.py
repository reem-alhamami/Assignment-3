# -*- coding: utf-8 -*-
"""PICKLE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19gDF8vG8MTRzK6TTqgrvaWMJ3eZHL-hs
"""

import pickle
import os
from enum import Enum

#FileHandler Class
class FileHandler:
    """
    Handles saving and loading data using Python's pickle module.
    """
    @staticmethod
    def save_data(data, filename):
        try:
            with open(filename, 'wb') as f:
                pickle.dump(data, f)
            print(f"Data saved to {filename}")
        except Exception as e:
            print(f"[Error] Could not save {filename}: {e}")

    @staticmethod
    def load_data(filename):
        if not os.path.exists(filename):
            print(f"[Info] {filename} not found. Returning empty data.")
            return {} if "user" in filename else []
        try:
            with open(filename, 'rb') as f:
                return pickle.load(f)
        except EOFError:
            print(f"[Info] {filename} is empty. Returning empty data.")
            return {} if "user" in filename else []
        except Exception as e:
            print(f"[Error] Could not load {filename}: {e}")
            return {} if "user" in filename else []

#Project Classes
class TicketType(Enum):
    SINGLERACE = 1
    WEEKENDPASS = 2
    SEASONMEMBERSHIP = 3
    GROUPDISCOUNT = 4

class Ticket:
    def __init__(self, ticket_id, ticket_type, price, validity, race_date):
        self.ticket_id = ticket_id
        self.ticket_type = ticket_type
        self.price = price
        self.validity = validity
        self.race_date = race_date

    def __str__(self):
        return f"{self.ticket_id} - {self.ticket_type.name} - {self.price} AED"

class PaymentMethod(Enum):
    CREDITCARD = 1
    DEBITCARD = 2
    DIGITALWALLET = 3

class PurchaseOrder:
    def __init__(self, order_id, order_date, total_amount, payment_method):
        self.order_id = order_id
        self.order_date = order_date
        self.total_amount = total_amount
        self.payment_method = payment_method

    def calculate_total(self):
        return self.total_amount

    def __str__(self):
        return f"Order #{self.order_id} on {self.order_date} - AED {self.total_amount} via {self.payment_method.name}"

class User:
    def __init__(self, user_id, name, email, password):
        self.__user_id = user_id
        self.__name = name
        self.__email = email
        self.__password = password

    def get_name(self):
        return self.__name

    def get_email(self):
        return self.__email

    def __str__(self):
        return f"{self.__name} ({self.__email})"

class Customer(User):
    def __init__(self, user_id, name, email, password, visit_count=0):
        super().__init__(user_id, name, email, password)
        self.__visit_count = visit_count
        self.__orders = []

    def add_order(self, order):
        self.__orders.append(order)

    def __str__(self):
        return f"Customer: {self.get_name()} - {len(self.__orders)} order(s)"

#Testing Pickle Saving & Loading

# Create ticket objects
ticket1 = Ticket("T001", TicketType.SINGLERACE, 100.0, "1 day", "2025-12-01")
ticket2 = Ticket("T002", TicketType.WEEKENDPASS, 250.0, "3 days", "2025-12-05")

# Create a purchase order
order1 = PurchaseOrder(1, "2025-05-13", 100.0, PaymentMethod.CREDITCARD)

# Create a customer and add the order
customer = Customer(1, "Shahad", "shahad@example.com", "1234")
customer.add_order(order1)

# Save data using FileHandler
FileHandler.save_data([ticket1, ticket2], "tickets.pkl")
FileHandler.save_data([order1], "orders.pkl")
FileHandler.save_data([customer], "customers.pkl")

# Load and print to confirm persistence
loaded_tickets = FileHandler.load_data("tickets.pkl")
loaded_orders = FileHandler.load_data("orders.pkl")
loaded_customers = FileHandler.load_data("customers.pkl")

# Display loaded results
print("\n Loaded Tickets:")
for t in loaded_tickets:
    print("-", t)

print("\n Loaded Orders:")
for o in loaded_orders:
    print("-", o)

print("\n Loaded Customers:")
for c in loaded_customers:
    print("-", c)